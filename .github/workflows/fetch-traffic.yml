name: GitHub Traffic Data Collector

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-traffic-data:
    runs-on: ubuntu-latest
    concurrency: 
      group: traffic-data-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
      - name: Checkout with cleanup
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
          clean: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install pygithub==1.59.0 pyyaml

      - name: Prepare data directory
        run: |
          # Sadece eski trafik verilerini sil
          find docs/data/repos/ -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} +
          mkdir -p docs/data/repos
          echo "DATA_DIR=docs/data" >> $GITHUB_ENV

      - name: Collect traffic data
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import os
          import json
          import time
          from datetime import datetime

          g = Github(os.environ['GH_TOKEN'])
          data_dir = os.environ['DATA_DIR']
          
          # Mevcut repo-info.json yoksa oluştur
          repo_info_path = f"{data_dir}/repo-info.json"
          repo_data = []
          
          try:
              for repo in g.get_user().get_repos(type='all'):
                  try:
                      repo_dir = f"{data_dir}/repos/{repo.name}"
                      os.makedirs(repo_dir, exist_ok=True)
                      
                      # Trafik verilerini topla
                      traffic_data = {
                          "views": {"views": [], "count": 0, "uniques": 0},
                          "clones": {"clones": [], "count": 0, "uniques": 0}
                      }
                      
                      try:
                          views = repo.get_views_traffic()
                          traffic_data["views"] = {
                              "views": [{
                                  "timestamp": v.timestamp.isoformat(),
                                  "count": v.count,
                                  "uniques": v.uniques
                              } for v in views["views"]],
                              "count": views["count"],
                              "uniques": views["uniques"]
                          }
                          with open(f"{repo_dir}/views.json", "w") as f:
                              json.dump(traffic_data["views"], f)
                      except Exception as e:
                          print(f"⚠️ Views error for {repo.name}: {str(e)}")
                      
                      try:
                          clones = repo.get_clones_traffic()
                          traffic_data["clones"] = {
                              "clones": [{
                                  "timestamp": c.timestamp.isoformat(),
                                  "count": c.count,
                                  "uniques": c.uniques
                              } for c in clones["clones"]],
                              "count": clones["count"],
                              "uniques": clones["uniques"]
                          }
                          with open(f"{repo_dir}/clones.json", "w") as f:
                              json.dump(traffic_data["clones"], f)
                      except Exception as e:
                          print(f"⚠️ Clones error for {repo.name}: {str(e)}")
                      
                      # Repo bilgilerini güncelle
                      repo_data.append({
                          "name": repo.name,
                          "full_name": repo.full_name,
                          "private": repo.private,
                          "updated_at": datetime.now().isoformat(),
                          "has_views": len(traffic_data["views"]["views"]) > 0,
                          "has_clones": len(traffic_data["clones"]["clones"]) > 0
                      })
                      
                      time.sleep(1.5)  # Rate limit koruması
                      
                  except Exception as e:
                      print(f"❌ Error processing {repo.name}: {str(e)}")
              
              # Repo bilgilerini yaz
              with open(repo_info_path, "w") as f:
                  json.dump(repo_data, f, indent=2)
              
              print(f"✅ Processed {len(repo_data)} repositories")
              
          except Exception as e:
              print(f"🔥 Critical error: {str(e)}")
              raise
          EOF

      - name: Force push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Tüm değişiklikleri ekle
          git add -f docs/data/
          
          # Commit oluştur
          git commit -m "📊 Updated traffic data [skip ci]" || echo "No changes to commit"
          
          # Force push yap (çakışmaları önlemek için)
          git pull origin main --rebase --allow-unrelated-histories || true
          git push origin main --force-with-lease