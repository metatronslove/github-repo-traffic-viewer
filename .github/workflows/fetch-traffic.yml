name: GitHub Traffic Data Collector

on:
  schedule:
    - cron: '0 * * * *'  # Her saat baÅŸÄ± Ã§alÄ±ÅŸÄ±r
  workflow_dispatch:      # Manuel Ã§alÄ±ÅŸtÄ±rma iÃ§in

jobs:
  fetch-traffic-data:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      checks: write
      deployments: write
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          mkdir -p docs/data/repos
          echo "DATA_DIR=docs/data" >> $GITHUB_ENV
          echo "REPOS_DIR=docs/data/repos" >> $GITHUB_ENV

      - name: Get repository list
        id: get-repos
        run: |
          # TÃ¼m repolarÄ± al (sayfalandÄ±rmayÄ± destekler)
          page=1
          all_repos=""
          while true; do
            echo "Fetching page $page"
            response=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user/repos?per_page=100&page=$page")
            
            # Hata kontrolÃ¼
            if echo "$response" | jq -e 'type == "array"' >/dev/null; then
              repos=$(echo "$response" | jq -r '.[].name')
              if [ -z "$repos" ]; then
                break  # BaÅŸka repo yok
              fi
              all_repos="$all_repos $repos"
              page=$((page+1))
              sleep 1  # Rate limit korumasÄ±
            else
              echo "API Error:"
              echo "$response" | jq .
              exit 1
            fi
          done
          
          echo "Found repositories:$all_repos"
          echo "repos=${all_repos}" >> $GITHUB_OUTPUT

      - name: Fetch traffic data for each repository
        run: |
          for repo in ${{ steps.get-repos.outputs.repos }}; do
            echo "Processing repository: $repo"
            
            # KlasÃ¶r oluÅŸtur
            mkdir -p "$REPOS_DIR/$repo"
            
            # GÃ¶rÃ¼ntÃ¼leme verileri
            echo "Fetching views for $repo"
            curl -s \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository_owner }}/$repo/traffic/views" \
              > "$REPOS_DIR/$repo/views.json"
            
            # Klonlama verileri
            echo "Fetching clones for $repo"
            curl -s \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository_owner }}/$repo/traffic/clones" \
              > "$REPOS_DIR/$repo/clones.json"
            
            sleep 1  # Rate limit korumasÄ±
          done

      - name: Generate repository index
        run: |
          # TÃ¼m repolarÄ±n temel bilgilerini kaydet
          curl -s \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/repos?per_page=100" \
            | jq '[.[] | {name: .name, full_name: .full_name, private: .private, updated_at: .updated_at}]' \
            > "$DATA_DIR/repo-info.json"

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/data/
          git commit -m "ðŸ”„ Update traffic data $(date '+%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push