name: GitHub Traffic Data Collector

on:
  schedule:
    - cron: '0 * * * *'  # Her saat baÅŸÄ± Ã§alÄ±ÅŸÄ±r
  workflow_dispatch:      # Manuel Ã§alÄ±ÅŸtÄ±rma iÃ§in

jobs:
  fetch-traffic-data:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}  # Ã–zel PAT kullanÄ±lÄ±yor

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup directories
        run: |
          mkdir -p docs/data/repos
          echo "REPOS_DIR=docs/data/repos" >> $GITHUB_ENV

      - name: Get all repositories
        id: get-repos
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          # Debug: Token kontrolÃ¼
          echo "Token first 5 chars: ${GH_TOKEN:0:5}..."
    
          # API'den veri Ã§ekme
          page=1
          all_repos=()
          while true; do
            echo "Fetching page $page"
            response=$(curl -s -w "%{http_code}" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user/repos?per_page=100&page=$page&type=all")
      
            # HTTP durum kodunu ayÄ±r
            http_code=${response: -3}
            response_content=${response%???}
      
            # Hata kontrolÃ¼
            if [ "$http_code" -ne 200 ]; then
              echo "API Error (HTTP $http_code):"
              echo "$response_content" | jq .
              exit 1
            fi
      
            # JSON validasyonu
            if ! echo "$response_content" | jq -e 'type == "array"' >/dev/null; then
              echo "Invalid API response format:"
              echo "$response_content" > response_error.json
              cat response_error.json
              exit 1
            fi
      
            # Repo isimlerini Ã§Ä±kart
            repos=$(echo "$response_content" | jq -r '.[].name? // empty')
            if [ -z "$repos" ]; then
              break  # BaÅŸka repo yok
            fi
      
            # RepolarÄ± diziye ekle
            while IFS= read -r repo; do
              all_repos+=("$repo")
            done <<< "$repos"
      
            page=$((page+1))
            sleep 1
          done
    
          # RepolarÄ± boÅŸlukla ayrÄ±lmÄ±ÅŸ string olarak kaydet
          echo "Found ${#all_repos[@]} repositories:"
          printf '%s\n' "${all_repos[@]}"
          echo "repos=${all_repos[*]}" >> $GITHUB_OUTPUT
          
      - name: Fetch traffic data
        run: |
          for repo in ${{ steps.get-repos.outputs.repos }}; do
            echo "Processing $repo"
            
            mkdir -p "$REPOS_DIR/$repo"
            
            # GÃ¶rÃ¼ntÃ¼lenme verileri
            curl -s \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository_owner }}/$repo/traffic/views" \
              > "$REPOS_DIR/$repo/views.json"
            
            # Klonlama verileri
            curl -s \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository_owner }}/$repo/traffic/clones" \
              > "$REPOS_DIR/$repo/clones.json"
            
            sleep 1  # Rate limit korumasÄ±
          done

      - name: Generate repository index
        run: |
          curl -s \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/repos?per_page=100" \
            | jq '[.[] | {name: .name, full_name: .full_name, private: .private, updated_at: .updated_at}]' \
            > docs/data/repo-info.json

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/data/
          git commit -m "ðŸ”„ Traffic data update $(date '+%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push