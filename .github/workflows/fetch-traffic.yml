name: GitHub Traffic Data Collector

on:
  schedule:
    - cron: '0 * * * *'  # Saatlik çalıştırma
  workflow_dispatch:

permissions:
  contents: write  # Push yetkisi için

jobs:
  traffic-collector:
    runs-on: ubuntu-latest
    concurrency: 
      group: traffic-${{ github.ref }}  # Aynı anda tek işlem
      cancel-in-progress: true

    steps:
      # 1. Temiz bir ortamda başlat
      - name: Checkout with fresh history
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0  # Tüm commit geçmişini çek
          clean: true  # Önceki dosyaları temizle

      # 2. Python ortamını kur
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      # 3. Gerekli kütüphaneleri yükle
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pygithub==1.59.0

      # 4. Veri toplama öncesi hazırlık
      - name: Prepare data environment
        run: |
          # Tüm eski verileri atomik şekilde sil
          rm -rf docs/data
          mkdir -p docs/data/repos
          echo '{"repositories":[]}' > docs/data/repo-info.json
          echo "DATA_DIR=docs/data" >> $GITHUB_ENV

      # 5. Veri toplama işlemi
      - name: Collect traffic data
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import os
          import json
          import time
          from datetime import datetime

          # 1. GitHub bağlantısı
          g = Github(os.environ['GH_TOKEN'])
          data_dir = os.environ['DATA_DIR']

          # 2. Repo bilgilerini yükle
          repo_info_path = os.path.join(data_dir, 'repo-info.json')
          repo_data = {"repositories": []}

          try:
              # 3. Tüm repoları işle
              for repo in g.get_user().get_repos(type='all'):
                  repo_dir = os.path.join(data_dir, 'repos', repo.name)
                  os.makedirs(repo_dir, exist_ok=True)

                  # 4. Views verisi
                  views_path = os.path.join(repo_dir, 'views.json')
                  try:
                      views = repo.get_views_traffic()
                      with open(views_path, 'w') as f:
                          json.dump({
                              "views": [{
                                  "timestamp": v.timestamp.isoformat(),
                                  "count": v.count,
                                  "uniques": v.uniques
                              } for v in views["views"]],
                              "total": views["count"],
                              "uniques_total": views["uniques"]
                          }, f)
                  except Exception as e:
                      print(f"⚠️ Views error: {repo.name} - {str(e)}")
                      open(views_path, 'w').close()  # Boş dosya

                  # 5. Clones verisi
                  clones_path = os.path.join(repo_dir, 'clones.json')
                  try:
                      clones = repo.get_clones_traffic()
                      with open(clones_path, 'w') as f:
                          json.dump({
                              "clones": [{
                                  "timestamp": c.timestamp.isoformat(),
                                  "count": c.count,
                                  "uniques": c.uniques
                              } for c in clones["clones"]],
                              "total": clones["count"],
                              "uniques_total": clones["uniques"]
                          }, f)
                  except Exception as e:
                      print(f"⚠️ Clones error: {repo.name} - {str(e)}")
                      open(clones_path, 'w').close()  # Boş dosya

                  # 6. Metadata güncelleme
                  repo_data["repositories"].append({
                      "name": repo.name,
                      "last_updated": datetime.now().isoformat(),
                      "has_views": os.path.getsize(views_path) > 0,
                      "has_clones": os.path.getsize(clones_path) > 0
                  })

                  time.sleep(2)  # Rate limit koruması

              # 7. Repo bilgilerini kaydet
              with open(repo_info_path, 'w') as f:
                  json.dump(repo_data, f, indent=2, sort_keys=True)

              print(f"✅ Processed {len(repo_data['repositories']} repos")

          except Exception as e:
              print(f"🔥 Critical error: {str(e)}")
              raise
          EOF

      # 6. Değişiklikleri atomik olarak işle
      - name: Commit & Push
        run: |
          # 1. Git yapılandırması
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 2. Tüm değişiklikleri ekle
          git add --force docs/data/

          # 3. Commit oluştur
          git commit -m "📊 Traffic data snapshot $(date '+%Y-%m-%d %H:%M')" || echo "No changes"

          # 4. Uzak depoyla senkronize et
          git pull --rebase origin main

          # 5. Force push (çakışmaları önlemek için)
          git push origin main --force-with-lease