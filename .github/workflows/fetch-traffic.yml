name: GitHub Traffic Data Collector

on:
  schedule:
    - cron: '0 * * * *'  # Runs hourly
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-traffic-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "pygithub==1.59.0" > requirements.txt
          echo "pyyaml" >> requirements.txt
          pip install -r requirements.txt

      - name: Clean previous data
        run: |
          rm -rf docs/data/
          mkdir -p docs/data/repos
          echo "DATA_DIR=docs/data" >> $GITHUB_ENV

      - name: Collect traffic data
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          python - <<EOF
          from github import Github
          import os
          import json
          import time
          from datetime import datetime

          g = Github(os.environ['GH_TOKEN'])
          data_dir = os.environ['DATA_DIR']
          
          try:
              repos = []
              for repo in g.get_user().get_repos(type='all'):
                  repos.append(repo)
                  time.sleep(0.5)
              
              repo_index = []
              
              for repo in repos:
                  try:
                      repo_dir = f"{data_dir}/repos/{repo.name}"
                      os.makedirs(repo_dir, exist_ok=True)
                      
                      repo_index.append({
                          "name": repo.name,
                          "full_name": repo.full_name,
                          "private": repo.private,
                          "updated_at": repo.updated_at.isoformat()
                      })
                      
                      # Views data with new structure
                      try:
                          views_traffic = repo.get_views_traffic()
                          views_data = {
                              "views": [{
                                  "timestamp": v.timestamp.isoformat(),
                                  "count": v.count,
                                  "uniques": v.uniques
                              } for v in views_traffic["views"]],
                              "count": views_traffic["count"],
                              "uniques": views_traffic["uniques"]
                          }
                          with open(f"{repo_dir}/views.json", "w") as f:
                              json.dump(views_data, f, indent=2)
                          print(f"✅ Saved views for {repo.name}")
                      except Exception as e:
                          print(f"⚠️ Couldn't get views for {repo.name}: {str(e)}")
                      
                      # Clones data with new structure
                      max_retries = 3
                      for attempt in range(max_retries):
                          try:
                              clones_traffic = repo.get_clones_traffic()
                              clones_data = {
                                  "clones": [{
                                      "timestamp": c.timestamp.isoformat(),
                                      "count": c.count,
                                      "uniques": c.uniques
                                  } for c in clones_traffic["clones"]],
                                  "count": clones_traffic["count"],
                                  "uniques": clones_traffic["uniques"]
                              }
                              with open(f"{repo_dir}/clones.json", "w") as f:
                                  json.dump(clones_data, f, indent=2)
                              print(f"✅ Saved clones for {repo.name} (attempt {attempt + 1})")
                              break
                          except Exception as e:
                              if attempt == max_retries - 1:
                                  print(f"❌ Failed to get clones for {repo.name}: {str(e)}")
                              else:
                                  time.sleep(2)
                      
                      time.sleep(2)  # Rate limit protection
                      
                  except Exception as e:
                      print(f"❌ Error processing {repo.name}: {str(e)}")
              
              with open(f"{data_dir}/repo-info.json", "w") as f:
                  json.dump(repo_index, f, indent=2)
              
              print(f"✅ Processed {len(repos)} repositories")
              
          except Exception as e:
              print(f"🔥 Critical error: {str(e)}")
              raise
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add docs/data/
          git commit -m "📊 Updated traffic data $(date '+%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main