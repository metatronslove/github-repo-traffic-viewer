function githubMarkdownToHtml(markdown){const container=document.createElement('div');if(typeof marked==='undefined'){throw new Error('marked.js library is required. Please include it before using this function.')}marked.setOptions({gfm:true,breaks:true,tables:true,pedantic:false,sanitize:false,smartLists:true,smartypants:false,xhtml:false,highlight:function(code,lang){if(typeof hljs!=='undefined'&&lang){try{return hljs.highlight(lang,code).value}catch(e){console.warn(`Error highlighting ${ lang } code:`,e)}}return code}});container.innerHTML=marked.parse(markdown);postProcessHtml(container);return container.innerHTML}function postProcessHtml(container){container.querySelectorAll('pre').forEach(pre=>{pre.classList.add('github-markdown-pre');const code=pre.querySelector('code');if(code){code.classList.add('github-markdown-code')}});container.querySelectorAll('table').forEach(table=>{table.classList.add('github-markdown-table')});container.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(header=>{const id=header.textContent.toLowerCase().replace(/[^\w\u4e00-\u9fa5]+/g,'-').replace(/^-+|-+$/g,'');header.id=id;const anchor=document.createElement('a');anchor.className='github-markdown-header-anchor';anchor.href=`#${ id }`;anchor.innerHTML='<svg aria-hidden="true" height="16" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>';header.prepend(anchor)})}function ToggleReadMe(repoName,fullName){const readmeContainer=document.getElementById(`readme-${ repoName }`);const toggleLinkText=document.getElementById(`toggle-${ repoName }`);if(readmeContainer.style.display==='none'){readmeContainer.style.display='block';toggleLinkText.innerHTML='README.md-'}else{readmeContainer.style.display='none';toggleLinkText.innerHTML='README.md+'}}async function fetchAndDisplayReadme(repoName,fullName){const readmeContainer=document.getElementById(`readme-${ repoName }`);try{const response=await fetch(`https://raw.githubusercontent.com/${ fullName }/main/README.md`);if(!response.ok){throw new Error(`Failed to fetch README: ${response.status }`)}let markdown=await response.text();markdown=convertRelativeUrls(markdown,fullName);const html=githubMarkdownToHtml(markdown);const modalHTML=`
              <div class="readme-modal-overlay" onclick="ToggleReadMe('${ repoName }')">
              <div class="readme-modal-content" onclick="event.stopPropagation()">
                  <div class="readme-modal-body">${ html }</div>
              </div>
              </div>
            `;readmeContainer.innerHTML=modalHTML;readmeContainer.style.display='none';processImagesAndLinks(readmeContainer,fullName);if(typeof hljs!=='undefined'){document.querySelectorAll('.readme-modal-body pre code').forEach(block=>{hljs.highlightElement(block)})}}catch(error){readmeContainer.innerHTML=`
              <div class="readme-modal-overlay" onclick="ToggleReadMe('${ repoName }')">
              <div class="readme-modal-content" onclick="event.stopPropagation()">
                  <div class="readme-modal-body">
                      <p>Could not load README.md for ${ repoName }</p>
                      <p>${error.message }</p>
                  </div>
                  </div>
              </div>
            `;readmeContainer.style.display='none'}}function convertRelativeUrls(markdown,fullName){markdown=markdown.replace(/!\[([^\]]*)\]\(([^)]+)\)/g,(match,altText,path)=>{if(!path.startsWith('http')&&!path.startsWith('data:')){if(path.startsWith('/')){path=`https://raw.githubusercontent.com/${ fullName }/main${ path }`}else{path=`https://raw.githubusercontent.com/${ fullName }/main/${ path }`}}return `![${ altText }](${ path })`});markdown=markdown.replace(/\[([^\]]+)\]\(([^)]+)\)/g,(match,text,path)=>{if(!path.startsWith('http')&&!path.startsWith('#')&&!path.startsWith('mailto:')){if(path.startsWith('/')){path=`https://github.com/${ fullName }/blob/main${ path }`}else{path=`https://github.com/${ fullName }/blob/main/${ path }`}}return `[${ text }](${ path })`});return markdown}function processImagesAndLinks(container,fullName){container.querySelectorAll('img').forEach(img=>{const src=img.getAttribute('src');if(src&&!src.startsWith('http')&&!src.startsWith('data:')){const absoluteSrc=src.startsWith('/')?`https://raw.githubusercontent.com/${ fullName }/main${ src }`:`https://raw.githubusercontent.com/${ fullName }/main/${ src }`;img.setAttribute('src',absoluteSrc)}});container.querySelectorAll('a').forEach(a=>{const href=a.getAttribute('href');if(href&&!href.startsWith('http')&&!href.startsWith('#')&&!href.startsWith('mailto:')){const absoluteHref=href.startsWith('/')?`https://github.com/${ fullName }/blob/main${ href }`:`https://github.com/${ fullName }/blob/main/${ href }`;a.setAttribute('href',absoluteHref);a.setAttribute('target','_blank');}})}function detectSystemTheme(){return window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light'}function setTheme(theme){document.documentElement.setAttribute('data-theme',theme);localStorage.setItem('theme',theme);updateChartColors()}function toggleTheme(){const current=localStorage.getItem('theme')||detectSystemTheme();const newTheme=current==='dark'?'light':'dark';setTheme(newTheme)}function updateChartColors(){const textColor=getComputedStyle(document.body).getPropertyValue('--text-color');const primaryColor=getComputedStyle(document.body).getPropertyValue('--primary-color');Object.keys(Chart.instances).forEach(key=>{const chart=Chart.instances[key];if(chart&&!chart._destroyed){chart.options.scales.x.ticks.color=textColor;chart.options.scales.y.ticks.color=textColor;chart.options.scales.x.grid.color=`${ textColor }10`;chart.options.scales.y.grid.color=`${ textColor }20`;chart.data.datasets[0].borderColor=primaryColor;chart.data.datasets[0].backgroundColor=`${ primaryColor }20`;chart.update()}})}function initTheme(){const savedTheme=localStorage.getItem('theme');const systemTheme=detectSystemTheme();setTheme(savedTheme||systemTheme);window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change',e=>{if(!localStorage.getItem('theme')){setTheme(e.matches?'dark':'light')}})}const translations={tr:{title:"GitHub Depo Trafik Verileri",loadingAuth:"GitHub oturumunuz kontrol ediliyor...",loadingRepos:(loaded)=>`Depo listesi alÄ±nÄ±yor (${ loaded } yÃ¼klendi)...`,totalRepos:(count)=>`Toplam depo: ${ count }`,perPage:`Sayfa baÅŸÄ±na depo sayÄ±sÄ±:
                    <select id="per-page">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                        `,pageStats:(current,total,count)=>`Sayfa ${ current }/${ total } | Toplam ${ count } depo`,repoHeader:(name)=>`<span class="repo-name">${ name }</span> deposu`,views:"GÃ¶rÃ¼ntÃ¼lenmeler",clones:"Klonlamalar",errorAuth:"LÃ¼tfen GitHub'da oturum aÃ§Ä±n",errorApiLimit:"API limiti aÅŸÄ±ldÄ±, birkaÃ§ dakika sonra tekrar deneyin",infoBox:`
                    <h3>ðŸš€ Kendi GitHub Trafik Verilerinizi GÃ¶rÃ¼n</h3>
                    <p>Bu sayfa sadece <strong>fork yapan kullanÄ±cÄ±nÄ±n</strong> kendi depo trafik verilerini gÃ¶sterir.</p>
                    <ol>
                        <li>SaÄŸ Ã¼stteki "Fork" butonuna basarak bu depoyu kendi hesabÄ±nÄ±za kopyalayÄ±n</li>
                        <li>GitHub Pages ayarlarÄ±ndan <code>docs</code> klasÃ¶rÃ¼nÃ¼ yayÄ±na alÄ±n</li>
                        <li>OluÅŸan sayfada <strong>kendi depo trafik verileriniz</strong> gÃ¶rÃ¼necektir</li>
                    </ol>
                `,previousPage:'&laquo; Ã–nceki',nextPage:'Sonraki &raquo;',timeRange:`Zaman AralÄ±ÄŸÄ±:
                    <select id="time-range">
                        <option value="1d">Son 1 GÃ¼n</option>
                        <option value="7d">Son 1 Hafta</option>
                        <option value="30d">Son 1 Ay</option>
                        <option value="90d">Son 3 Ay</option>
                        <option value="180d">Son 6 Ay</option>
                        <option value="365d">Son 1 YÄ±l</option>
                        <option value="all">TÃ¼m Zamanlar</option>
                    </select>
                    `},en:{title:"GitHub Repository Traffic Stats",loadingAuth:"Checking GitHub session...",loadingRepos:(loaded)=>`Loading repository list (${ loaded } loaded)...`,totalRepos:(count)=>`Total repositories: ${ count }`,perPage:`Repositories per page:
                    <select id="per-page">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
            `,pageStats:(current,total,count)=>`Page ${ current }/${ total } | Total ${ count } repos`,repoHeader:(name)=>`<span class="repo-name">${ name }</span> repository`,views:"Views",clones:"Clones",errorAuth:"Please log in to GitHub",errorApiLimit:"API rate limit exceeded, try again later",infoBox:`
                    <h3>ðŸš€ View Your GitHub Traffic Stats</h3>
                    <p>This page shows traffic stats only for the <strong>forking user's</strong> repositories.</p>
                    <ol>
                        <li>Click "Fork" button to copy this repo to your account</li>
                        <li>Enable GitHub Pages for the <code>docs</code> folder</li>
                        <li>You'll see your own repository traffic stats</li>
                    </ol>
                `,previousPage:'&laquo; Previous',nextPage:'Next &raquo;',timeRange:`Time Range:
                    <select id="time-range">
                        <option value="1d">Last Day</option>
                        <option value="7d">Last Week</option>
                        <option value="30d">Last Month</option>
                        <option value="90d">Last 3 Months</option>
                        <option value="180d">Last 6 Months</option>
                        <option value="365d">Last Year</option>
                        <option value="all">All Time</option>
                    </select>
                    `}};translations.tr.errorLoadingRepos="Depo listesi yÃ¼klenemedi";translations.en.errorLoadingRepos="Failed to load repository list";translations.tr.noData="Veri bulunamadÄ±";translations.en.noData="No data available";translations.tr.errorLoadingData="Veri yÃ¼klenirken hata oluÅŸtu";translations.en.errorLoadingData="Error loading data";let lang=localStorage.getItem('lang')||'tr';function updateAllTranslations(){document.querySelector('[data-translate="title"]').textContent=translations[lang].title;let TimeRangesPreviousValue=String(document.getElementById('time-range').value);document.querySelector('[data-translate="timeRange"]').innerHTML=translations[lang].timeRange;let timeRangechoices=['1d','7d','30d','90d','180d','365d','all'];for(let d=0;d<timeRangechoices.length;d+=1){const option=document.getElementById('time-range').querySelector(`option[value='${timeRangechoices[d]}']`);if(option){if(option.hasAttribute('selected')||option.selected){option.removeAttribute('selected');option.selected=false}}}let timeRangeoptionToSelect=document.getElementById('time-range').querySelector(`option[value='${ TimeRangesPreviousValue }']`);if(timeRangeoptionToSelect){timeRangeoptionToSelect.setAttribute('selected','selected')}let PerPagePreviousValue=String(document.getElementById('per-page').value);document.querySelector('[data-translate="perPage"]').innerHTML=translations[lang].perPage;let perPagechoices=['10','25','50','100'];for(let d=0;d<perPagechoices.length;d+=1){const option=document.getElementById('per-page').querySelector(`option[value='${perPagechoices[d]}']`);if(option){if(option.hasAttribute('selected')||option.selected){option.removeAttribute('selected');option.selected=false}}}let optionToSelect=document.getElementById('per-page').querySelector(`option[value='${ PerPagePreviousValue }']`);if(optionToSelect){optionToSelect.setAttribute('selected','selected')}if(document.getElementById('loading')){document.getElementById('loading').textContent=translations[lang].loadingAuth}const pagination=document.getElementById('pagination');if(pagination){const prevBtn=pagination.querySelector('button:first-child');const nextBtn=pagination.querySelector('button:last-child');if(prevBtn){prevBtn.innerHTML=translations[lang].previousPage}if(nextBtn){nextBtn.innerHTML=translations[lang].nextPage}}}function mergeDuplicateDates(data){const merged={};data.forEach(item=>{const fixedTimestamp=fixTimestamp(item.timestamp);const dateKey=fixedTimestamp.split('T')[0];if(!merged[dateKey]){merged[dateKey]={...item,timestamp:fixedTimestamp}}else{merged[dateKey].count+=item.count;merged[dateKey].uniques+=item.uniques}});return Object.values(merged)}function changeLanguage(lang){lang=lang;localStorage.setItem('lang',lang);updateAllTranslations();document.getElementById('charts-container').innerHTML='';displayRepos();document.querySelectorAll('.lang-btn').forEach(btn=>{btn.classList.toggle('active',btn.textContent===lang.toUpperCase())})}let allRepos=[];let currentPage=1;let reposPerPage=document.getElementById('per-page').value;let totalPages=Math.ceil(allRepos.length/reposPerPage);function getBasePath(){if(window.location.host.includes('github.io')){const pathParts=window.location.pathname.split('/');return pathParts.slice(0,3).join('/')}return ''}async function fetchTrafficData(repoName){try{const basePath=getBasePath();const[viewsRes,clonesRes]=await Promise.all([fetch(`${ basePath }/data/repos/${encodeURIComponent(repoName)}/views.json`),fetch(`${ basePath }/data/repos/${encodeURIComponent(repoName)}/clones.json`)]);if(!viewsRes.ok){console.warn(`Views data not found for ${ repoName }`);return{views:{views:[]}}}if(!clonesRes.ok){console.warn(`Clones data not found for ${ repoName }`);return{clones:{clones:[]}}}const views=await viewsRes.json();const clones=await clonesRes.json();views.views=mergeDuplicateDates(views.views);clones.clones=mergeDuplicateDates(clones.clones);const trafficData={views:views||{views:[]},clones:clones||{clones:[]}};if(!validateTrafficData(trafficData)){throw new Error('Invalid data structure')}return trafficData}catch(error){console.error(`Error loading traffic data for ${ repoName }:`,error);return{views:{views:[]},clones:{clones:[]}}}}async function fetchUserData(){return{login:"auto-generated"}}async function fetchAllRepos(){try{const basePath=getBasePath();const response=await fetch(`${ basePath }/data/repo-info.json`);if(!response.ok){const absoluteUrl=`https://${window.location.host }${ basePath }/data/repo-info.json`;const fallbackResponse=await fetch(absoluteUrl);if(!fallbackResponse.ok){throw new Error('Repository list not found')}return await fallbackResponse.json()}const data=await response.json();return Array.isArray(data)?{repositories:data}:data}catch(error){console.error('Error loading repositories:',error);showInfoBox();return{repositories:[]}}}function validateTrafficData(data){if(!data){return false}if(data.views&&!Array.isArray(data.views.views)){return false}if(data.clones&&!Array.isArray(data.clones.clones)){return false}return true}function fixTimestamp(timestamp){if(typeof timestamp!=='string'){return '1970-01-01T00:00:00Z'}return timestamp.replace(' Above','')}function safeDateParse(timestamp){const fixed=fixTimestamp(timestamp);const date=new Date(fixed);if(isNaN(date.getTime())){console.warn('Invalid date detected, using fallback:',timestamp);const datePart=fixed.split('T')[0]||'1970-01-01';return new Date(`${ datePart }T00:00:00Z`)}return date}function formatDate(isoString){try{const date=safeDateParse(isoString);return date.toLocaleDateString(lang,{year:'numeric',month:'short',day:'numeric'})}catch(e){console.error('Date formatting error:',e);return 'Invalid Date'}}function fillMissingDates(data,range){if(!data||data.length===0){return[]}const dateMap=new Map();data.forEach(item=>{const fixedTimestamp=fixTimestamp(item.timestamp);const date=safeDateParse(fixedTimestamp);const dateKey=date.toISOString().split('T')[0];dateMap.set(dateKey,{...item,timestamp:fixedTimestamp})});const sortedDates=Array.from(dateMap.keys()).sort();if(sortedDates.length===0){return[]}const startDate=safeDateParse(sortedDates[0]);const endDate=safeDateParse(sortedDates[sortedDates.length-1]);for(let d=new Date(startDate);d<=endDate;d.setDate(d.getDate()+1)){const dateStr=d.toISOString().split('T')[0];if(!dateMap.has(dateStr)){dateMap.set(dateStr,{timestamp:`${ dateStr }T00:00:00Z`,count:0,uniques:0})}}return Array.from(dateMap.values()).sort((a,b)=>{return safeDateParse(a.timestamp)-safeDateParse(b.timestamp)})}function createChart(canvasId,label,data,labels,total){const ctx=document.getElementById(canvasId);if(!ctx){return}if(data.length===0){ctx.parentElement.innerHTML=`<p>${translations[lang].noData }</p>`;return}const textColor=getComputedStyle(document.body).getPropertyValue('--text-color');const primaryColor=getComputedStyle(document.body).getPropertyValue('--primary-color');return new Chart(ctx,{type:'line',data:{labels:labels,datasets:[{label:`${ label } (Toplam: ${total||0})`,data:data,borderColor:primaryColor,backgroundColor:`${ primaryColor }20`,borderWidth:2,tension:0.3,fill:true}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:true,position:'top',labels:{color:textColor}}},scales:{y:{beginAtZero:true,ticks:{color:textColor},grid:{color:`${ textColor }20`}},x:{ticks:{color:textColor,maxRotation:45,minRotation:45},grid:{color:`${ textColor }10`}}}}})}function showError(messageKey){const messages={'LÃ¼tfen GitHub\'da oturum aÃ§Ä±n':translations[lang].errorAuth,'API limiti aÅŸÄ±ldÄ±, birkaÃ§ dakika sonra tekrar deneyin':translations[lang].errorApiLimit};const message=messages[messageKey]||messageKey;const container=document.getElementById('charts-container');container.innerHTML=`<div class="error">${ message }</div>`}function showInfoBox(){const info=`
                <div class="info-box">
                    ${translations[lang].infoBox }
                </div>
            `;document.getElementById('info-container').innerHTML=info}function setupPagination(totalRepos,reposPerPage){totalPages=Math.ceil(totalRepos/reposPerPage);const paginationDiv=document.getElementById('pagination');paginationDiv.innerHTML='';if(totalPages<=1){return}const prevButton=document.createElement('button');prevButton.innerHTML=translations[lang].previousPage;prevButton.disabled=currentPage===1;prevButton.addEventListener('click',()=>{if(currentPage>1){currentPage-=1;displayRepos()}});paginationDiv.appendChild(prevButton);const maxVisiblePages=5;let startPage=Math.max(1,currentPage-Math.floor(maxVisiblePages/2));let endPage=Math.min(totalPages,startPage+maxVisiblePages-1);if(endPage-startPage+1<maxVisiblePages){startPage=Math.max(1,endPage-maxVisiblePages+1)}for(let i=startPage;i<=endPage;i+=1){const pageButton=document.createElement('button');pageButton.textContent=i;if(i===currentPage){pageButton.classList.add('active')}pageButton.addEventListener('click',()=>{currentPage=i;displayRepos()});paginationDiv.appendChild(pageButton)}const nextButton=document.createElement('button');nextButton.innerHTML=translations[lang].nextPage;nextButton.disabled=currentPage===totalPages;nextButton.addEventListener('click',()=>{if(currentPage<totalPages){currentPage+=1;displayRepos()}});paginationDiv.appendChild(nextButton);paginationDiv.style.display='flex'}function filterDataByDateRange(data,range){if(range==='all'){return data}const days=parseInt(range)||30;const cutoffDate=new Date();cutoffDate.setUTCHours(0,0,0,0);cutoffDate.setUTCDate(cutoffDate.getUTCDate()-days);return data.filter(item=>{if(!item||!item.timestamp){return false}const fixedTimestamp=fixTimestamp(item.timestamp);const itemDate=new Date(fixedTimestamp);itemDate.setUTCHours(0,0,0,0);if(itemDate<cutoffDate){return false}return item})}async function displayRepos(){if(!allRepos||!allRepos.repositories){showError(translations[lang].errorLoadingRepos);return}const getTimeRangeValue=()=>{const selector=document.getElementById('time-range');return selector?selector.value:'30d';};const selectedRange=getTimeRangeValue();const startIdx=(currentPage-1)*reposPerPage;const endIdx=startIdx+reposPerPage;const reposToShow=allRepos.repositories.slice(startIdx,endIdx);const totalPages=Math.ceil(allRepos.repositories.length/document.getElementById('per-page').value);document.getElementById('charts-container').innerHTML='';document.getElementById('loading').textContent=translations[lang].loadingRepos(0);const showElementIfExists=(id)=>{const el=document.getElementById(id);el.style.display='block'};showElementIfExists('per-page-container');if(document.getElementById('per-page')){document.getElementById('per-page').addEventListener('change',(e)=>{reposPerPage=parseInt(e.target.value)||25;currentPage=1;displayRepos()})}else{console.warn('Per page selector not found')}showElementIfExists('time-range-container');if(document.getElementById('time-range')){document.getElementById('time-range').addEventListener('change',displayRepos)}else{console.warn('Time range selector not found')}let loadedCount=0;for(const repo of reposToShow){document.getElementById('loading').textContent=translations[lang].loadingRepos(loadedCount+=1);const trafficData=await fetchTrafficData(repo.name);const filteredViews=filterDataByDateRange(trafficData.views.views,selectedRange);const filteredClones=filterDataByDateRange(trafficData.clones.clones,selectedRange);const completeViews=fillMissingDates(filteredViews,selectedRange);const completeClones=fillMissingDates(filteredClones,selectedRange);const container=document.createElement('div');container.className='chart-box';container.innerHTML=`
                    <h3><a href="https://github.com/${repo.full_name }" target="_blank">ðŸ”— ${translations[lang].repoHeader(repo.name)}</a> | <a href="https://github.com/${repo.full_name }/zipball/main" target="_top">zipâ¬‡</a> | <a href="https://github.com/${repo.full_name }/tarball/main" target="_top">tarâ¬‡</a> | <a href="https://github.com/${repo.full_name }/fork" target="_blank">forkðŸ–ˆ</a> | <a onclick="ToggleReadMe('${repo.name }', '${repo.full_name }')" id="toggle-${repo.name }">README.md+</a></h3>
                    <div id="readme-${repo.name }" style="display:none;"></div>
                    <div class="stats-summary">
                        <div class="stat-item">
                            <span class="stat-label">${translations[lang].views }:</span>
                            <span class="stat-value">${trafficData.views.count||0}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">${translations[lang].clones }:</span>
                            <span class="stat-value">${trafficData.clones.count||0}</span>
                        </div>
                    </div>
                    <div class="chart-row">
                        <div class="chart-container">
                            <canvas id="views-${repo.name }"></canvas>
                        </div>
                        <div class="chart-container">
                            <canvas id="clones-${repo.name }"></canvas>
                        </div>
                    </div>
                `;document.getElementById('charts-container').appendChild(container);fetchAndDisplayReadme(repo.name,repo.full_name);createChart(`views-${repo.name }`,translations[lang].views,completeViews.map(v=>v.count),completeViews.map(v=>formatDate(v.timestamp)),trafficData.views.count);createChart(`clones-${repo.name }`,translations[lang].clones,completeClones.map(c=>c.count),completeClones.map(c=>formatDate(c.timestamp)),trafficData.clones.count)}document.getElementById('pagination').style.display='flex';document.getElementById('loading').textContent=translations[lang].pageStats(currentPage,totalPages,allRepos.repositories.length);setupPagination(allRepos.repositories.length,document.getElementById('per-page').value)}async function main(){try{initTheme();updateAllTranslations();allRepos=await fetchAllRepos();if(!allRepos.repositories||allRepos.repositories.length===0){showInfoBox();return}displayRepos()}catch(error){console.error('Main function error:',error);showError(translations[lang].errorLoadingData)}}window.addEventListener('DOMContentLoaded',()=>{document.querySelectorAll('.lang-btn').forEach(btn=>{btn.classList.toggle('active',btn.textContent===lang.toUpperCase())});if(document.getElementById('time-range')){document.getElementById('time-range').addEventListener('change',displayRepos)}else{console.warn('Time range selector not found')}if(document.getElementById('per-page')){document.getElementById('per-page').addEventListener('change',(e)=>{reposPerPage=parseInt(e.target.value)||25;currentPage=1;displayRepos()})}else{console.warn('Per page selector not found')}main()});